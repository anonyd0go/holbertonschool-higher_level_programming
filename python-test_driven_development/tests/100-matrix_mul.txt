The ``matrix_mul`` module
=========================

Using ``matrix_mul``
--------------------

Importing the module
    >>> matrix_mul = __import__("100-matrix_mul").matrix_mul

Checking the module Docstring
    >>> docstr = __import__("100-matrix_mul").__doc__
    >>> len(docstr) > 1
    True

Multiplying two valid matrices
    >>> m_a = [[1, 2], [3, 4]]
    >>> m_b = [[5, 6], [7, 8]]
    >>> matrix_mul(m_a, m_b)
    [[19, 22], [43, 50]]

Multiplying with a matrix containing floats
    >>> m_a = [[1.5, 2.5], [3.5, 4.5]]
    >>> m_b = [[5.5, 6.5], [7.5, 8.5]]
    >>> matrix_mul(m_a, m_b)
    [[27.0, 31.0], [53.0, 61.0]]

Handling invalid type for m_a (not a list)
    >>> matrix_mul(123, [[1, 2], [3, 4]])
    Traceback (most recent call last):
        ...
    TypeError: m_a must be a list

Handling invalid type for m_b (not a list)
    >>> matrix_mul([[1, 2], [3, 4]], 123)
    Traceback (most recent call last):
        ...
    TypeError: m_b must be a list

Handling invalid type for m_a (not a list of lists)
    >>> matrix_mul([1, 2, 3, 4], [[1, 2], [3, 4]])
    Traceback (most recent call last):
        ...
    TypeError: m_a must be a list of lists

Handling invalid type for m_b (not a list of lists)
    >>> matrix_mul([[1, 2], [3, 4]], [1, 2, 3, 4])
    Traceback (most recent call last):
        ...
    TypeError: m_b must be a list of lists

Handling empty matrix m_a
    >>> matrix_mul([], [[1, 2], [3, 4]])
    Traceback (most recent call last):
        ...
    ValueError: m_a can't be empty

Handling empty matrix m_b
    >>> matrix_mul([[1, 2], [3, 4]], [])
    Traceback (most recent call last):
        ...
    ValueError: m_b can't be empty

Handling non-rectangular matrix m_a
    >>> matrix_mul([[1, 2], [3, 4, 5]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
        ...
    TypeError: each row of m_a must be of the same size

Handling non-rectangular matrix m_b
    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4, 5]])
    Traceback (most recent call last):
        ...
    TypeError: each row of m_b must be of the same size

Handling incompatible matrices for multiplication
    >>> matrix_mul([[1, 2]], [[1, 2], [3, 4], [5, 6]])
    Traceback (most recent call last):
        ...
    ValueError: m_a and m_b can't be multiplied

Handling matrix m_a list of list of not number
    >>> matrix_mul([["A", "C"], ["B", "D"]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
        ...
    TypeError: m_a should contain only integers or floats

Handling matrix m_b list of list of not number
    >>> matrix_mul([[1, 2], [3, 4]], [["A", "C"], ["B", "D"]])
    Traceback (most recent call last):
        ...
    TypeError: m_b should contain only integers or floats

Handling missing one argument
    >>> matrix_mul([[1, 2], [3, 4]])
    Traceback (most recent call last):
        ...
    TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

Handling missing two arguments
    >>> matrix_mul()
    Traceback (most recent call last):
        ...
    TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'
